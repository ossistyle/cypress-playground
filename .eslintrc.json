{
  "env": {
    "mocha": true
  },
  "extends": [
    "airbnb-base",
    "airbnb-typescript/base",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:cypress/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint", "cypress", "prettier", "chai-friendly"],
  // https://github.com/dolthub/dolthub-cypress/blob/main/.eslintrc.json
  "root": true,
  // https://github.com/dolthub/dolthub-cypress/blob/main/.eslintrc.json
  "rules": {
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array-simple"
      }
    ],
    "@typescript-eslint/await-thenable": "error", // error
    "@typescript-eslint/explicit-function-return-type": "error", // error
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "selector": "default"
      },
      {
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "selector": "variable"
      },
      {
        "format": ["PascalCase"],
        "selector": ["typeLike"]
      },
      {
        "format": ["UPPER_CASE"],
        "selector": ["enumMember"]
      },
      {
        "format": null,
        "selector": ["objectLiteralProperty"]
      },
      {
        "filter": {
          "match": true,
          "regex": ":|-|@.*|_charset_"
        },
        "format": null,
        "selector": ["property"]
      }
    ],
    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-explicit-any": "off", // let's do it better next time :)
    "@typescript-eslint/no-extra-non-null-assertion": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-unused-expressions": "off", // use chai-friendly/no-unused-expressions instead
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "variables": false
      }
    ],
    "@typescript-eslint/prefer-interface": "off",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/promise-function-async": "error",
    "chai-friendly/no-unused-expressions": "error",
    "cypress/no-unnecessary-waiting": "warn",
    "import/prefer-default-export": "off",
    "no-nested-ternary": "warn",
    "no-param-reassign": "error", // error
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    "no-return-assign": "error", // error
    "no-sequences": "error",
    "no-underscore-dangle": "off",
    "no-unused-expressions": "off",
    //"no-use-before-define": "off",
    "no-use-before-define": [
      "error",
      { "classes": false, "functions": false, "variables": false }
    ],
    "prefer-regex-literals": "error", // error
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  }
}
